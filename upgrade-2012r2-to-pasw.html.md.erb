---
title: Migrating from PASW 2012 R2 to PASW
owner: Windows
---

<% current_page.data.title = "Migrating from " + vars.windows_runtime_abbr + " 2012 R2 to " + vars.windows_runtime_abbr  %>

This topic describes the changes in functionality associated with moving from <%= vars.windows_runtime_full %> 2012 R2 (<%= vars.windows_runtime_abbr %> 2012 R2) to <%= vars.windows_runtime_full %> (<%= vars.windows_runtime_abbr %>).


## <a id='overview'></a> Overview

<%= vars.windows_runtime_abbr %> v2.1 and later offer a containerized runtime based on true Windows Server containers. In this containerized runtime, Windows Diego Cells on PAS use Microsoft's Windows containers and related features.

As a result, functionality leveraged in the <%= vars.windows_runtime_abbr %> 2012 R2 shared-host container model must be adjusted. In <%= vars.windows_runtime_abbr %> v2.1 and later, Windows containers feature an isolated file system and a more defined role on their host, increasing security and enabling container networking.

The following sections compare features and functionality in <%= vars.windows_runtime_abbr %> 2012 R2 and <%= vars.windows_runtime_abbr %>:

+ [MSI-Installed Drivers Previously Installed with BOSH Add-Ons](#msi)
+ [Pushing .NET Apps with APM Tools](#apm)
+ [<%= vars.windows_runtime_abbr %> Windows Stack](#windows-stack)

### <a id='principles'></a> Guiding Principles

In this containerized runtime, it is important to remember:

* Apps within a Windows container have their own file systems and registries.

* In general, the dependencies in <%= vars.windows_runtime_abbr %> 2012 R2 that were originally made available on the host should now be provided within the container.

* Developers can create similar <%= vars.windows_runtime_abbr %> 2012 R2 app environments by creating bin-deployable dependencies and extension buildpacks. For more information about extension buildpacks, see [Creating an Extension Buildpack for .NET Apps](https://docs.pivotal.io/platform/buildpacks/hwc/extension-buildpack.html).

### <a id='upgrading'></a> Upgrading to <%= vars.windows_runtime_abbr %>

To upgrade, operators install the new <%= vars.windows_runtime_abbr %> tile alongside the existing <%= vars.windows_runtime_abbr %> 2012 R2 tile. After installation, developers can choose which stack to target in their manifests, or they can specify the stack when they use the Cloud Foundry Command Line Interface (cf CLI) to push apps.

For more information about installing the <%= vars.windows_runtime_abbr %> tile, see [Installing and Configuring <%= vars.windows_runtime_abbr %>](./installing.html).

<p class="note"><strong>Note:</strong> <%= vars.windows_runtime_abbr %> v2.3 is the last version compatible with the <%= vars.windows_runtime_abbr %> 2012 R2 release. The deprecation date for <%= vars.windows_runtime_abbr %> 2012 R2 is September 30, 2019. Contact your Pivotal account team for more information about migration and upgrade options.</p>


## <a id='msi'></a> MSI-Installed Drivers Previously Installed with BOSH Add-Ons

Operators can install dependencies like Open Database Connectivity (ODBC) drivers when pushing .NET apps.

In <%= vars.windows_runtime_abbr %> 2012 R2, operators install ODBC drivers on the host VM using BOSH Add-ons. These drivers are shared by the apps deployed in IronFrame containers. The drivers can also be included in the stemcell image.

In <%= vars.windows_runtime_abbr %>, developers install the ODBC driver package locally from the source, extract the installation DLL files, copy the driver dependency to the .NET app's `/bin` directory, and then deploy the app.


## <a id='apm'></a> Pushing .NET Apps with APM Tools

Both <%= vars.windows_runtime_abbr %> and <%= vars.windows_runtime_abbr %> 2012 R2 support pushing .NET apps with Application Performance Monitoring (APM) tools. Developers and operators can use third-party APM tools to measure app performance and resource usage.

To push a .NET app with APM tools in <%= vars.windows_runtime_abbr %> 2012 R2, operators install APM software using BOSH add-ons. For more information, see [Deploying BOSH Add-Ons](../customizing/add-ons.html).

To push a .NET app with APM tools in <%= vars.windows_runtime_abbr %>, operators download an extension buildpack for the APM software, and then push their .NET app with the extension buildpack. APM software vendors, including New Relic and AppDynamics, provide extension buildpacks for their APM tools on [Pivotal Network](https://network.pivotal.io).


## <a id='windows-stack'></a> <%= vars.windows_runtime_abbr %> Windows Stack

A stack is a prebuilt root file system (rootfs) that supports a specific operating system. The stack works in tandem with a buildpack to support apps running in containers.

The deprecated `windows2012` stack is based on Windows Server 2012 R2. The current `windows` stack always points to the latest version of Windows Server.

Developers specify the Windows stack when pushing an app. See the following examples:

* In <%= vars.windows_runtime_abbr %> 2012 R2, operators use the `windows2012` stack to push .NET apps. For example:
  
  	```
	cf push example-app -s windows2012 -b hwc_buildpack
	```

* In <%= vars.windows_runtime_abbr %> v2.4 and later, operators use the `windows` stack to push .NET apps. For example:
  
  	```
  	cf push example-app -s windows -b hwc_buildpack
  	```
